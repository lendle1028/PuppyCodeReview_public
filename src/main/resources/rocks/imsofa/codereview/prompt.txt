請幫我檢視學生的 ${language} 程式碼，該程式的目的是:
-----------------
${objective}
-----------------
請進行 code review，先告訴我程式是否正確，然後按照我提供的方針，給予審查的建議。在檢查是否正確的時候，請特別注意大括號、引號的成對性。我將提供你輸出格式、學生的程式碼、標準答案、審查方針，
首先，這段程式碼的目的是印出 messages 這個 list 裏面的每個元素，請你在回覆時，採用 json 格式輸出，要確保是合法的 json 格式，內容的部分要做必要的 escape，除了 json 內容之外，不要再輸出其他文字，以下是範例：

{
    "scores": {
        "correctness":與標準答案接近或功能達到要求的程度,
        "design":設計面向分數,
        "functionality":功能性面向分數,
        "complexity":複雜度面向分數,
        "smell":code smell 分數，越少 smell，分數越高
    },
    "explain": "評論程式碼，主要針對正確與否，例如，程式碼裏面的迴圈寫錯了",
    "keywords":["根據 issues 內容，以至少2個關鍵字，最多10個關鍵字來 tag"]
    "issues": {
        "overview": "以文字大致上總結 code review 所發現的 issues，儘量精簡",
        "design": [
            {
                "startLine":第一個code review 的設計面向問題的起始行號, 
                "endLine":第一個code review 的設計面向問題的結束行號,
                "description": "第一個code review 的設計面向問題的說明"
            }，
            {
                "startLine":第二個code review 的設計面向問題的起始行號, 
                "endLine":第二個code review 的設計面向問題的結束行號,
                "description": "第二個code review 的設計面向問題的說明"
            }
        ],
        "functionality": [
            {
                "startLine":第一個code review 的功能性面向問題的起始行號, 
                "endLine":第一個code review 的功能性面向問題的結束行號,
                "description": "第一個code review 的功能性面向問題的說明"
            }，
            {
                "startLine":第二個code review 的功能性面向問題的起始行號, 
                "endLine":第二個code review 的功能性面向問題的結束行號,
                "description": "第二個code review 的功能性面向問題的說明"
            }
        ],
        "complexity": [
            {
                "startLine":第一個code review 的複雜度面向問題的起始行號, 
                "endLine":第一個code review 的複雜度面向問題的結束行號,
                "description": "第一個code review 的複雜度面向問題的說明"
            }，
            {
                "startLine":第二個code review 的複雜度面向問題的起始行號, 
                "endLine":第二個code review 的複雜度面向問題的結束行號,
                "description": "第二個code review 的複雜度面向問題的說明"
            }
        ],
        "smell": "code review 的 code smell 問題，用一句話描述，儘量精簡"
    }
}

其中，scores 裏面的各項分數，請參考所附給你的標準答案，與標準答案的各面向接近或更好，就給100分，否則按比例扣減，其中正確性分數請從100往下扣，發現一個小錯誤扣5分。explain 請說明上述判斷的依據，review 請填入 review 的結果，裏面所有的行號，從1開始，keywords 請從下列清單中挑選，不可以使用清單以外的關鍵字：


結構清晰
設計合理
設計不足
模組劃分佳
功能完整
功能缺失
操作流暢
操作需改進
邏輯清晰
邏輯混亂
代碼簡潔
代碼冗長
命名清楚
命名需優化
註解不足

接下來，學生的程式碼是：

${studentCode}

然後，標準答案是：

${answer}

最後，審查方針請檢查:
設計 (Design): 程式碼是否設計良好且適合您的系統？
功能性 (Functionality): 程式碼是否按照作者的意圖運作？程式碼的運作方式對用戶來說是否良好？
複雜度 (Complexity): 程式碼是否可以更簡單？另一個開發人員是否能夠在未來輕鬆理解和使用此程式碼？
測試 (Tests): 程式碼是否具有正確且設計良好的自動化測試？
命名 (Naming): 開發人員對變數、類別、方法等是否選擇了清晰的命名？
註解 (Comments): 註解是否清晰有用？
並且避免下列的 code smells：
代碼重複: 相同或者相似的代碼存在於一個以上的地方。
長方法: 一個非常長的方法、函式或者過程。
巨類: 一個非常龐大的類。
太多的參數: 函式或者過程的冗長的參數列使得代碼可讀性和品質非常差。
特性依戀: 一個類過度的使用另一個類的方法。
親密關係: 一個類依賴另一個類的實現細節。
拒絕繼承: 子類以一種『拒絕』的態度，覆蓋基礎類別中的方法，換句話說，子類不想繼承父類別中的方法，參考里氏替換原則。
冗餘類 / 寄生蟲: 一個功能太少的類。
人為的複雜: 在簡單設計已經滿足需求的時候，強迫使用極度複雜的設計模式。
超長識別碼: 尤其，在軟體工程中，應該毫無保留的使用命名規則來消除歧義。
超短識別碼: 除非很明顯，一個變數名應該反映它的功用。
過度使用字面值: 為提高可讀性和避免編碼錯誤，應該使用命名常數。此外，字面值可以且應該在可能的情況下，獨立存放於資原始檔或者指令碼中，在軟體部署到不同區域時，可以很方便地在地化。
